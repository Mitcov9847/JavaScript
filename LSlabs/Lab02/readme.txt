
Оглавление
Инструкции по запуску проекта
Описание лабораторной работы
Краткая документация к проекту
Примеры использования проекта
Ответы на контрольные вопросы
Список использованных источников
Дополнительные важные аспекты
Инструкции по запуску проекта
Для запуска этого проекта вам потребуется использовать редактор кода Visual Studio Code (VS Code) с установленным расширением Live Server. Это расширение позволяет запускать HTML-файлы в режиме реального времени в вашем браузере.

Если вы попытаетесь запустить HTML-файл напрямую из папки в браузере, вы можете столкнуться с ошибкой CORS (Cross-Origin Resource Sharing). Это происходит потому, что браузеры блокируют запросы к файлам, которые находятся не на том же источнике, что и веб-страница. Вот типичное сообщение об ошибке, которое вы можете увидеть:

“Access to script at ‘file:///D:/js_ind_2/src/index.js’ from origin ‘null’ has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, isolated-app, chrome-extension, chrome, https, chrome-untrusted.”

Описание лабораторной работы
В этой лабораторной работе я сосредоточился на разработке функции getRandomActivity(), которая делает запрос к API и получает данные о случайной активности. Я использовал fetch() для выполнения HTTP-запроса и обработал полученные данные, чтобы отобразить текст активности на веб-странице.

Затем я добавил обработку ошибок в функцию getRandomActivity(). В случае ошибки я добавил текст “К сожалению, произошла ошибка” на веб-страницу.

Я также изменил функцию getRandomActivity(), чтобы она использовала ключевые слова async / await.

Наконец, я добавил функционал обновления данных каждую минуту с использованием функции setTimeout(). Я также изменил функцию getRandomActivity(), чтобы она возвращала данные, и добавил функцию updateActivity(), которая отображает полученные данные.

Краткая документация к проекту
Проект состоит из четырех файлов:

index.html - основной HTML-файл, который содержит структуру веб-страницы.
index.css - CSS-файл, который используется для стилизации веб-страницы. В настоящее время он пуст.
index.js - JavaScript-файл, который импортирует и вызывает функцию startUpdatingActivity() из файла activity.js.
activity.js - JavaScript-файл, который содержит функции для получения случайной активности из API и обновления ее на веб-странице.

Анализ предоставленного кода:
Структура проекта:

index.html: HTML-файл содержит структуру веб-страницы с заголовком и элементом для отображения активности.
index.css: CSS-файл в данный момент пустой, но может использоваться для стилизации страницы.
index.js: JavaScript-файл импортирует функцию startUpdatingActivity из activity.js и вызывает ее, запуская обновление активности на странице.
activity.js: JavaScript-файл содержит функции:
getRandomActivity(): Асинхронно получает случайную активность от API, возвращая ее или сообщение об ошибке.
updateActivity(): Обновляет текст активности на странице, используя getRandomActivity().
startUpdatingActivity(): Запускает updateActivity(), затем устанавливает таймер на 1 минуту для повторного вызова себя, создавая цикл обновления.
Запуск проекта:

Откройте index.html в браузере.
На странице должна отображаться случайная активность, обновляемая каждую минуту.
В случае ошибки при получении активности появится сообщение об ошибке.
Примеры использования:

Мини-приложение для капитана Смита: Предлагает капитану Смиту новое занятие при каждом обновлении, помогая ему бороться со скукой в его путешествиях.
Ответы на контрольные вопросы:

Что возвращает функция fetch?

Функция fetch() возвращает объект Promise, который решается в объект Response, представляющий ответ на запрос.
Что такое Promise?

Promise в JavaScript - это объект, связанный с асинхронной операцией. Он может менять свое состояние в будущем:
Pending: Начальное состояние, не выполнено и не отклонено.
Fulfilled: Операция завершена успешно.
Rejected: Операция завершена с ошибкой.
Какие методы доступны у объекта Promise?

then(): Добавляет обработчики для вызова при "выполнении" или "отклонении" промиса.
catch(): Добавляет обработчик для вызова при "отклонении" промиса.
finally(): Добавляет обработчик для вызова всегда, независимо от результата промиса.
Основные отличия async/await от Promise:

Promise:
Более старый подход к асинхронным операциям.
Использует методы .then(), .catch(), .finally() для управления состояниями/результатами.
Async/Await:
Более новый и современный подход.
Позволяет писать асинхронный код, похожий на синхронный, повышая читаемость.
Использует Promises "под капотом", но с более простым синтаксисом.
Дополнительно:

Предоставленный код демонстрирует базовый пример использования async/await и Promise для асинхронного обновления данных на веб-странице.
В реальных проектах код может быть более сложным, с обработкой ошибок, различными источниками данных и более advanced UI.
Async/await generally considered more modern and easier to read than Promises, but both are viable options for asynchronous programming in JavaScript.
