
Отчет - Индивидуальная работа №1
Оглавление
Инструкции по запуску проекта
Описание лабораторной работы
Краткая документация к проекту
Примеры использования проекта
Ответы на контрольные вопросы
Список использованных источников
Дополнительные важные аспекты
1. Инструкции по запуску проекта
Для успешного запуска этого проекта рекомендуется использовать редактор кода Visual Studio Code с установленным Node.js.

2. Описание лабораторной работы
Цель: Разработка консольного приложения для анализа транзакций.

3. Краткая документация к проекту
Структура проекта:

transactions.json: Хранит данные о транзакциях, подлежащих анализу.
index.js: Основной файл с реализацией логики приложения.
package.json, package-lock.json, node_modules: Файлы и папка, необходимые для работы prompt().
Класс TransactionAnalyzer:

Функциональность:
Обработка и анализ транзакций.
Методы:
addTransaction(transactionData): Добавляет новую транзакцию.
getAllTransactions(): Возвращает список всех транзакций.
getUniqueTransactionTypes(): Возвращает массив уникальных типов транзакций.
calculateTotalAmount(): Рассчитывает общую сумму транзакций.
calculateTotalAmountByDate(year, month, day): Рассчитывает сумму транзакций за указанную дату.
getTransactionByType(type): Возвращает транзакции определенного типа.
getTransactionsInDateRange(startDate, endDate): Возвращает транзакции в заданном диапазоне дат.
getTransactionsByMerchant(merchantName): Возвращает транзакции, совершенные с указанным продавцом.
calculateAverageTransactionAmount(): Вычисляет средний чек.
getTransactionsByAmountRange(minAmount, maxAmount): Возвращает транзакции в заданном диапазоне сумм.
calculateTotalDebitAmount(): Рассчитывает общую сумму дебетовых транзакций.
findMostTransactionsMonth(): Определяет месяц с наибольшим количеством транзакций.
findMostDebitTransactionMonth(): Определяет месяц с наибольшим количеством дебетовых транзакций.
mostTransactionTypes(): Возвращает тип транзакций, встречающийся чаще всего.
getTransactionsBeforeDate(date): Возвращает транзакции, совершенные до указанной даты.
findTransactionById(id): Возвращает транзакцию по ее ID.
mapTransactionDescriptions(): Возвращает новый массив, содержащий только описания транзакций.
Объект Transaction:

Предназначение: Хранит информацию о транзакции.
Свойства:
transaction_id: Уникальный идентификатор транзакции.
transaction_date: Дата совершения транзакции.
transaction_amount: Сумма транзакции.
transaction_type: Тип транзакции ("debit" - дебетовая, etc.).
transaction_description: Описание транзакции.
merchant_name: Название магазина/компании.
card_type: Тип карты, использованной для оплаты.
4. Примеры использования проекта
Анализ истории транзакций для выявления закономерностей и трендов.
Расчет общих сумм расходов по категориям, датам, продавцам и т.д.
Поиск подозрительных или несанкционированных транзакций.
5. Ответы на контрольные вопросы
1. Какие примитивные типы данных существуют в JavaScript?

number
undefined
boolean
string
symbol
bigint
2. Какие методы массивов вы использовали для обработки и анализа данных в вашем приложении, и как они помогли в выполнении задачи?

В данном "приложении" был применен один метод массивов для обработки и анализа данных:

.filter(): Для создания нового массива, содержащего транзакции за опреде